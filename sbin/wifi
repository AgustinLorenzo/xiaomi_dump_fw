#!/bin/sh
# Copyright (C) 2006 OpenWrt.org

. /lib/functions.sh
. /usr/share/libubox/jshn.sh

wifi_qca_lock="/var/run/wifi.lock"
wifi_xqwhc_lock="/var/run/xqwhc_wifi.lock"
xqwhc_init_lock="/var/lock/xqwhc_initting.lock"
XQLOGTAG="xqwhc_wifi"
usage() {
	cat <<EOF
Usage: $0 [down|detect|reload|status]
enables (default), disables or detects a wifi configuration.
EOF
	lock -u $wifi_qca_lock
	exit 1
}

ubus_wifi_cmd() {
	local cmd="$1"
	local dev="$2"

	json_init
	[ -n "$2" ] && json_add_string device "$2"
	ubus call network.wireless "$1" "$(json_dump)"
}

find_net_config() {(
	local vif="$1"
	local cfg
	local ifname

	config_get cfg "$vif" network

	[ -z "$cfg" ] && {
		include /lib/network
		scan_interfaces

		config_get ifname "$vif" ifname

		cfg="$(find_config "$ifname")"
	}
	[ -z "$cfg" ] && return 0
	echo "$cfg"
)}


bridge_interface() {(
	local cfg="$1"
	[ -z "$cfg" ] && return 0

	include /lib/network
	scan_interfaces

	for cfg in $cfg; do
		config_get iftype "$cfg" type
		[ "$iftype" = bridge ] && config_get "$cfg" ifname
		prepare_interface_bridge "$cfg"
		return $?
	done
)}

prepare_key_wep() {
	local key="$1"
	local hex=1

	echo -n "$key" | grep -qE "[^a-fA-F0-9]" && hex=0
	[ "${#key}" -eq 10 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 26 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 32 -a $hex -eq 1 ] || {
		[ "${key:0:2}" = "s:" ] && key="${key#s:}"
		key="$(echo -n "$key" | hexdump -ve '1/1 "%02x" ""')"
	}
	echo "$key"
}

wifi_fixup_hwmode() {
	local device="$1"
	local default="$2"
	local hwmode hwmode_11n

	config_get channel "$device" channel
	config_get hwmode "$device" hwmode
	case "$hwmode" in
		11ad) hwmode=ad;;
		11bg) hwmode=bg;;
		11a) hwmode=a;;
		11b) hwmode=b;;
		11g) hwmode=g;;
		11n*)
			hwmode_11n="${hwmode##11n}"
			case "$hwmode_11n" in
				a|g) ;;
				default) hwmode_11n="$default"
			esac
			config_set "$device" hwmode_11n "$hwmode_11n"
		;;
		*)
			hwmode=
			if [ "${channel:-0}" -gt 0 ]; then
				if [ "${channel:-0}" -gt 14 ]; then
					hwmode=a
				else
					hwmode=g
				fi
			else
				hwmode="$default"
			fi
		;;
	esac
	config_set "$device" hwmode "$hwmode"
}

_wifi_updown() {
	for driver in ${DRIVERS}; do (
		if eval "type pre_${driver}" 2>/dev/null >/dev/null; then
			eval "pre_${driver}" ${1}
		fi
	); done

	for device in ${2:-$DEVICES}; do (
		config_get disabled "$device" disabled
		[ "$disabled" = "1" ] && {
			echo "'$device' is disabled"
			set disable
		}
		config_get iftype "$device" type
		if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
			eval "scan_$iftype '$device'"
			eval "${1}_$iftype '$device'" || echo "$device($iftype): ${1} failed"
		elif [ ! -f /lib/netifd/wireless/$iftype.sh ]; then
			echo "$device($iftype): Interface type not supported"
		fi
	); done

	for driver in ${DRIVERS}; do (
		if eval "type post_${driver}" 2>/dev/null >/dev/null; then
			eval "post_${driver}" ${1}
		fi
	); done
}

wifi_updown() {
	cmd=down
	[ enable = "$1" ] && {
		_wifi_updown disable "$2"
		ubus_wifi_cmd "$cmd" "$2"
		scan_wifi
		cmd=up
	}
	ubus_wifi_cmd "$cmd" "$2"
	_wifi_updown "$@"
}

wifi_recover() {
	_wifi_updown disable_recover
	_wifi_updown enable_recover
}

wifi_reload_legacy() {
	_wifi_updown "disable" "$1"
	scan_wifi
	_wifi_updown "enable" "$1"
}

wifi_reload() {
	ubus call network reload
	wifi_reload_legacy
}

wifi_detect() {
	for driver in ${1:-$DRIVERS}; do (
		if eval "type detect_$driver" 2>/dev/null >/dev/null; then
			eval "detect_$driver" || echo "$driver: Detect failed" >&2
		else
			echo "$driver: Hardware detection not supported" >&2
		fi
	); done
}

wifi_unload() {
	_wifi_updown "disable" "$1"
	for driver in ${1:-$DRIVERS}; do (
		if eval "type unload_$driver" 2>/dev/null >/dev/null; then
			eval "unload_$driver" || echo "$driver: unload failed" >&2
		else
			echo "$driver: wifi unload not supported" >&2
		fi
	); done
}

wifi_load() {
	wifi_unload
	for driver in ${1:-$DRIVERS}; do (
		if eval "type load_$driver" 2>/dev/null >/dev/null; then
			eval "load_$driver" || echo "$driver: load failed" >&2
		else
			echo "$driver: wifi load not supported" >&2
		fi
	); done
	_wifi_updown "enable" "$1"
}

start_net() {(
	local iface="$1"
	local config="$2"
	local vifmac="$3"

	[ -f "/var/run/$iface.pid" ] && kill "$(cat /var/run/${iface}.pid)" 2>/dev/null
	[ -z "$config" ] || {
		include /lib/network
		scan_interfaces
		for config in $config; do
			setup_interface "$iface" "$config" "" "$vifmac"
		done
	}
)}

set_wifi_up() {
	local cfg="$1"
	local ifname="$2"
	uci_set_state wireless "$cfg" up 1
	uci_set_state wireless "$cfg" ifname "$ifname"
}

set_wifi_down() {
	local cfg="$1"
	local vifs vif vifstr

	[ -f "/var/run/wifi-${cfg}.pid" ] &&
		kill "$(cat "/var/run/wifi-${cfg}.pid")" 2>/dev/null
	uci_revert_state wireless "$cfg"
	config_get vifs "$cfg" vifs
	for vif in $vifs; do
		uci_revert_state wireless "$vif"
	done
}

scan_wifi() {
	local cfgfile="$1"
	DEVICES=
	config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
				config_set "$section" vifs ""
				config_set "$section" ht_capab ""
			;;
		esac

		# section end
		config_get TYPE "$CONFIG_SECTION" TYPE
		case "$TYPE" in
			wifi-iface)
				config_get device "$CONFIG_SECTION" device
				config_get vifs "$device" vifs
				echo $vifs | grep -q $CONFIG_SECTION
				if [ $? -ne 0 ]
				then
					append vifs "$CONFIG_SECTION"
				fi
				config_set "$device" vifs "$vifs"
			;;
		esac
	}
	config_load "${cfgfile:-wireless}"
}

wifi_trap() {
	for driver in ${1:-$DRIVERS}; do (
		if eval "type trap_$driver" 2>/dev/null >/dev/null; then
			eval "trap_$driver" >&2
		fi
	); done
}

update_lbd_config()
{
    local ssid_2g="`uci -q get wireless.@wifi-iface[1].ssid`"
    local dis_2g="`uci -q get wireless.@wifi-iface[1].disabled`"
    local ssid_5g="`uci -q get wireless.@wifi-iface[0].ssid`"
    local dis_5g="`uci -q get wireless.@wifi-iface[0].disabled`"
    local ssid_lbd="`uci -q get lbd.config.MatchingSSID`"

    logger -p 1 -t "$XQLOGTAG" "   lbd MatchSSID changed, $ssid_lbd -> $ssid_2g,$ssid_5g"
    uci -q delete lbd.config.MatchingSSID
    # assign public wifi-iface ssid, exclude minet_ready from hyd Wlanif
    [ "0$dis_2g" -ne "1" ] && uci add_list lbd.config.MatchingSSID="$ssid_2g"
    [ "$ssid_5g" != "$ssid_2g" ] && {
        [ "0$dis_5g" -ne "1" ] && uci add_list lbd.config.MatchingSSID="$ssid_5g"
    }
    # assign bh ssid
    . /lib/xqwhc/xqwhc_public.sh
    [ "$BH_METHOD" -eq "$USE_ONLY_5G_IND_VAP_BH" -o "$BH_METHOD" -eq "$USE_DUAL_BAND_IND_VAP_BH" ] && {
        local bh_ifname="`uci get misc.backhauls.backhaul_5g_ap_iface`"
        local bh_ssid="`uci get "$(uci show wireless | awk -F 'ifname' '/'$bh_ifname'/{print $1}')ssid"`"
        [ -n "$bh_ssid" ] && uci add_list lbd.config.MatchingSSID="$bh_ssid"
    }
    uci commit lbd
    # NONEED hyd restart, cause in wifi context, hyd restart will trigger in hotplug later
}
## generic xqwhc process in wifi
# f1. CAP&RE: check plc nmk & lbd MatchingSSID, they all relay on whc wifi ap ssid
# f2. CAP: launch whc_sync to notice all REs
# return: 0  need handle whc_sync; 
#         ~0 no need, equvilent to normal wifi process
whc_handle()
{
    [ "1" = "`nvram get QSDK_SON`" ] && return 11
    # check mode in xqwhc
    local mode="`uci -q get xiaoqiang.common.NETMODE`"
    [ "whc_cap" != "$mode" -a "whc_re" != "$mode" -a "lanapmode" != "$mode" ] && {
        logger -p 1 -t "$XQLOGTAG" " run in NON xqwhc mode, ignore whc_handle! "
        return 9
    }

    local cap_mode="`uci -q get xiaoqiang.common.CAP_MODE`"
    local mesh_version="`uci -q get xiaoqiang.common.MESH_VERSION`"
    [ "lanapmode" = "$mode" ] && [ "ap" != "$cap_mode" -o "1" = "$mesh_version" -o -z "$mesh_version" ] && {
        logger -p 1 -t "$XQLOGTAG" " run in NON xqwhc mode, ignore whc_handle! "
        return 9 
    }

    if ! lock -n $xqwhc_init_lock; then
        logger -p 1 -t "$XQLOGTAG" " run in xqwhc init context, ignore whc_handle! "
        return 10
    fi
    lock -u $xqwhc_init_lock
    # in booting context, NO need handle whc here, cause repacd start will call wifi again
    echo -n "$ppcmd" | grep -q "rc.common.*network.*boot" && {
        logger -p 1 -t "$XQLOGTAG" "  *ignore whc_handle in network boot context"
        return 12
    }
    #update_lbd_config
    #3600 not support plc backhaul
    #plc_lbd_handle
    # lock to indicate that first calling wifi by upper layer
        if lock -n $wifi_xqwhc_lock 2>/dev/null ; then
            # if CAP, launch whc_sync and exit this instance
            if [ $mesh_version -gt 1 ]; then
                if mesh_cmd iscap; then
                    logger -p 1 -t "$XQLOGTAG" "   CAP, launch whc sync before wifi up"
                    mesh_cmd sync
                    lock -u $wifi_qca_lock
                    return 0
                else
                    logger -p 1 -t "$XQLOGTAG" "   NONCAP, continue "
                fi
            fi
        else
                logger -p 1 -t "$XQLOGTAG" "   call from whc, instant continue"
        fi
        return 1
}
DEVICES=
DRIVERS=
include /lib/wifi
trap "lock -u $wifi_qca_lock; lock -u $wifi_xqwhc_lock; lock -u $xqwhc_init_lock; exit 1" SIGHUP SIGINT SIGTERM
lock $wifi_qca_lock
scan_wifi

trap 'wifi_trap; exit' INT TERM ABRT QUIT ALRM
# miwifi: check if caller from /etc/init.d/network on rcS boot, thus we ignore whc_handle
ppid=$PPID
ppcmd="`cat /proc/${ppid}/cmdline 2>/dev/null`"
logger -p 1 -t "$XQLOGTAG" "**arg=$@, ppid $ppid, cmd=<$ppcmd>"
ppid=`cat /proc/${ppid}/status 2>/dev/null| grep PPid | grep -o "[0-9]*"`
logger -p 1 -t "$XQLOGTAG" " *parent ppid $ppid, cmd=<`cat /proc/${ppid}/cmdline 2>/dev/null`>"

case "$1" in
	down) wifi_updown "disable" "$2";;
	detect) wifi_detect "$2";;
	status) ubus_wifi_cmd "status" "$2";;
	reload) wifi_reload "$2";;
	reload_legacy) wifi_reload_legacy "$2";;
	load) wifi_load "$2";;
	unload) wifi_unload "$2";;
	recover) wifi_recover "$2";;
	--help|help) usage;;
	*) 
	    whc_handle && exit 0
	    ubus call network reload
	    wifi_updown "enable" "$2"
            /usr/sbin/update_whc_ob_bssid &
	;;
esac
lock -u $wifi_xqwhc_lock
lock -u $wifi_qca_lock
