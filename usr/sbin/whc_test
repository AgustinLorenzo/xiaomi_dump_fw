#!/bin/sh

# parse method and params from buff

. /lib/xqwhc/xqwhc_public.sh

def_ssid="!@Mi-son"
def_pswd="123456789"
def_mac="88:c3:97:30:a1:b1"

usage()
{
    echo "$0 stub usage:"
    echo " stub wifi def: <$def_ssid> ; <$def_pswd>"
    if [ "$BH_METHOD" -eq "$USE_ONLY_5G_IND_VAP_BH" -o "$BH_METHOD" -eq "$USE_DUAL_BAND_IND_VAP_BH" ]; then
        echo " init cap [ssid] [group_id]| init re [ssid] [group_id]| delete | postinit | status | topo | init router [ssid] | init relay [ssid]"
    else
        echo " init cap [ssid]| init re [ssid]| delete | postinit | status | topo | init router [ssid] | init relay [ssid]"
    fi
}



__init_relay()
{
    local ssid="$1"

    ##### init device as a bridge relay
    whc_ssid="$ssid"
    whc_pswd="$def_pswd"
    whc_mgmt="mixed-psk"

    # network
    uci set dhcp.lan.ignore=1
    uci commit dhcp
    uci set network.lan.ifname='eth2 eth3 eth4';
    uci set network.lan.proto=dhcp
    uci -q delete network.lan.ipaddr
    uci -q delete network.lan.netmask
    uci -q delete network.lan.gateway
    uci -q delete network.lan.dns
    uci -q delete network.lan.mtu
    uci -q delete network.wan
    uci -q delete network.wan6
    uci commit network

    # wifi, do NOT auto create wifi vap by repacd, setup vap and key parameters by user define
    uci set wireless.wifi0.repacd_auto_create_vaps=0
    uci set wireless.wifi1.repacd_auto_create_vaps=0
    uci set wireless.wifi2.repacd_auto_create_vaps=0
if [ "$XQWHC_DEBUG_EVT" = "1" ]; then
    uci set wireless.wifi0.macaddr="$mac_5g_stub"
    uci set wireless.wifi1.macaddr="$mac_2g_stub"

    uci set wireless.wifi0.txpwr=mid
    uci set wireless.wifi1.txpwr=min
fi

    uci set wireless.@wifi-iface[0]=wifi-iface
    uci set wireless.@wifi-iface[0].device='wifi0'
    uci set wireless.@wifi-iface[0].network='lan'
    uci set wireless.@wifi-iface[0].mode='ap'
    uci set wireless.@wifi-iface[0].disabled='0'
    uci set wireless.@wifi-iface[0].ssid="$whc_ssid"
    uci set wireless.@wifi-iface[0].encryption="$whc_mgmt"
    uci set wireless.@wifi-iface[0].key="$whc_pswd"
    uci set wireless.@wifi-iface[0].wds='1'
#    uci set wireless.@wifi-iface[0].wnm='1'
#    uci set wireless.@wifi-iface[0].rrm='1'
#    uci set wireless.@wifi-iface[0].backhaul='1'
#    uci set wireless.@wifi-iface[0].backhaul_ap='1'
#    uci set wireless.@wifi-iface[0].wps_pbc='1'
#    uci set wireless.@wifi-iface[0].wps_pbc_enable='0'
#    uci set wireless.@wifi-iface[0].wps_pbc_start_time='0'
#    uci set wireless.@wifi-iface[0].wps_pbc_duration='120'
#    uci set wireless.@wifi-iface[0].blockdfschan='0'
    uci set wireless.@wifi-iface[0].disablecoext='0'
    uci set wireless.@wifi-iface[0].athnewind='1'
    uci set wireless.@wifi-iface[0].group='0'

    uci set wireless.@wifi-iface[1]=wifi-iface
    uci set wireless.@wifi-iface[1].device='wifi1'
    uci set wireless.@wifi-iface[1].network='lan'
    uci set wireless.@wifi-iface[1].mode='ap'
    uci set wireless.@wifi-iface[1].disabled='0'
    uci set wireless.@wifi-iface[1].ssid="$whc_ssid"
    uci set wireless.@wifi-iface[1].encryption="$whc_mgmt"
    uci set wireless.@wifi-iface[1].key="$whc_pswd"
    uci set wireless.@wifi-iface[1].disablecoext='0'
    uci set wireless.@wifi-iface[1].wds='1'
#    uci set wireless.@wifi-iface[1].wnm='1'
#    uci set wireless.@wifi-iface[1].blockdfschan='0'
#    uci set wireless.@wifi-iface[1].rrm='1'
#    uci set wireless.@wifi-iface[1].backhaul='1'
#    uci set wireless.@wifi-iface[1].backhaul_ap='1'
#    uci set wireless.@wifi-iface[1].wps_pbc='1'
#    uci set wireless.@wifi-iface[1].wps_pbc_enable='0'
#    uci set wireless.@wifi-iface[1].wps_pbc_start_time='0'
#    uci set wireless.@wifi-iface[1].wps_pbc_duration='120'
    uci set wireless.@wifi-iface[1].athnewind='1'
    uci set wireless.@wifi-iface[1].group='0'

:<<!
    local ifnready="$(uci -q get misc.wireless.iface_ready_2g_ifname)"
    [ -z "$ifnready" ] && ifnready=wl13
    local devready="$(uci -q get misc.wireless.iface_ready_2g_deviceidx)"
    devready="$(uci -q get misc.wireless.${devready}_name)"
    [ -z "$devready" ] && devready=wifi1
    uci -q delete wireless.$sready

    local sguest="$(uci -q get misc.wireless.iface_guest_2g_name)"
    [ -z "$sguest" ] && sguest=guest_2G
    if uci -q get wireless.${sguest} >/dev/null 2>&1; then
        WHC_LOGI " has guest network, destroy before create whc-RE!"
        guestwifi.sh unset
    fi
!

    # setup sta ifaces
    uci add wireless wifi-iface
    uci set wireless.@wifi-iface[3]=wifi-iface
    uci set wireless.@wifi-iface[3].device='wifi0'
    uci set wireless.@wifi-iface[3].ifname='wl01'
    uci set wireless.@wifi-iface[3].network='lan'
    uci set wireless.@wifi-iface[3].mode='sta'
    uci set wireless.@wifi-iface[3].disabled='0'
    uci set wireless.@wifi-iface[3].ssid="$whc_ssid"
    uci set wireless.@wifi-iface[3].encryption="$whc_mgmt"
    uci set wireless.@wifi-iface[3].key="$whc_pswd"
    uci set wireless.@wifi-iface[3].wds='1'
#    uci set wireless.@wifi-iface[3].wps_pbc='1'
#    uci set wireless.@wifi-iface[3].wps_pbc_enable='0'
#    uci set wireless.@wifi-iface[3].wps_pbc_start_time='0'
#    uci set wireless.@wifi-iface[3].wps_pbc_duration='120'
#    uci set wireless.@wifi-iface[3].backhaul='1'
    uci set wireless.@wifi-iface[3].athnewind='1'
    uci set wireless.@wifi-iface[3].group='0'

    uci add wireless wifi-iface
    uci set wireless.@wifi-iface[4]=wifi-iface
    uci set wireless.@wifi-iface[4].device='wifi1'
    uci set wireless.@wifi-iface[4].ifname='wl11'
    uci set wireless.@wifi-iface[4].network='lan'
    uci set wireless.@wifi-iface[4].mode='sta'
    uci set wireless.@wifi-iface[4].disabled='0'
    uci set wireless.@wifi-iface[4].ssid="$whc_ssid"
    uci set wireless.@wifi-iface[4].encryption="$whc_mgmt"
    uci set wireless.@wifi-iface[4].key="$whc_pswd"
    uci set wireless.@wifi-iface[4].wds='1'
#    uci set wireless.@wifi-iface[4].wps_pbc='1'
#    uci set wireless.@wifi-iface[4].wps_pbc_enable='0'
#    uci set wireless.@wifi-iface[4].wps_pbc_start_time='0'
#    uci set wireless.@wifi-iface[4].wps_pbc_duration='120'
#    uci set wireless.@wifi-iface[4].backhaul='1'
    uci set wireless.@wifi-iface[4].athnewind='1'
    uci set wireless.@wifi-iface[4].group='0'

    # restore minet_ready wifi-iface section
    # make sure minet_ready is always the last wifi-iface
:<<!
    uci -q batch <<-EOF >/dev/null
set wireless.${sready}=wifi-iface
set wireless.${sready}.device=${devready}
set wireless.${sready}.ifname=$ifnready
set wireless.${sready}.network=ready
set wireless.${sready}.encryption=none
set wireless.${sready}.mode=ap
set wireless.${sready}.hidden=1
set wireless.${sready}.ssid=${sready}
set wireless.${sready}.bsd=0
set wireless.${sready}.disabled=0
set wireless.${sready}.wsplcd_unmanaged=1
set wireless.${sready}.repacd_security_unmanaged=1
set wireless.${sready}.group=1
EOF
!
    uci commit wireless

    # make sure network restart after wireless config update
    # so that we up all wifi ifaces within a single network restart, no need another 'wifi up'
    /etc/init.d/network restart
    /etc/init.d/dnsmasq restart

    # skip hyd lbd repacd

    # miwifi service
    /etc/init.d/firewall stop
    /etc/init.d/firewall disable

    /etc/init.d/trafficd restart

    return 0
}

__init_router()
{
    local ssid="$1"

    ##### init device as a bridge relay
    whc_ssid="$ssid"
    whc_pswd="$def_pswd"
    whc_mgmt="mixed-psk"

    # wifi
    uci set wireless.wifi0.repacd_auto_create_vaps=0
    uci set wireless.wifi1.repacd_auto_create_vaps=0
    uci set wireless.wifi2.repacd_auto_create_vaps=0
    if [ "$XQWHC_DEBUG_EVT" = "1" ]; then
        uci set wireless.wifi0.macaddr="$mac_5g_stub"
        uci set wireless.wifi1.macaddr="$mac_2g_stub"
        uci set wireless.wifi0.channel='149'
        uci set wireless.wifi1.channel='11'

        uci set wireless.wifi0.txpwr=mid
        uci set wireless.wifi1.txpwr=min
    fi

    uci set wireless.@wifi-iface[0].ssid="$whc_ssid"
    uci set wireless.@wifi-iface[0].encryption="$whc_mgmt"
    uci set wireless.@wifi-iface[0].key="$whc_pswd"
    uci set wireless.@wifi-iface[0].wds='1'
#    uci set wireless.@wifi-iface[0].backhaul=1
#    uci set wireless.@wifi-iface[0].backhaul_ap=1
#    uci set wireless.@wifi-iface[0].wnm=1
#    uci set wireless.@wifi-iface[0].wps_pbc='1'
#    uci set wireless.@wifi-iface[0].wps_pbc_enable='0'
#    uci set wireless.@wifi-iface[0].wps_pbc_start_time='0'
#    uci set wireless.@wifi-iface[0].wps_pbc_duration='120'
    uci set wireless.@wifi-iface[0].athnewind='1'
    uci set wireless.@wifi-iface[0].group=0

    uci set wireless.@wifi-iface[1].ssid="$whc_ssid"
    uci set wireless.@wifi-iface[1].encryption="$whc_mgmt"
    uci set wireless.@wifi-iface[1].key="$whc_pswd"
    uci set wireless.@wifi-iface[1].wds='1'
#    uci set wireless.@wifi-iface[1].backhaul=1
#    uci set wireless.@wifi-iface[1].backhaul_ap=1
#    uci set wireless.@wifi-iface[1].wnm=1
#    uci set wireless.@wifi-iface[1].wps_pbc='1'
#    uci set wireless.@wifi-iface[1].wps_pbc_enable='0'
#    uci set wireless.@wifi-iface[1].wps_pbc_start_time='0'
#    uci set wireless.@wifi-iface[1].wps_pbc_duration='120'
    uci set wireless.@wifi-iface[1].athnewind='1'
    uci set wireless.@wifi-iface[1].group=0
    uci commit wireless


    /etc/init.d/network restart

    # miwifi service
    /etc/init.d/trafficd restart

    return 0
}

__trans_group_id_to_mac()
{
    local grp_id="$1"
    local t_mac="$def_mac"

    local mac_b1=$(echo $def_mac | cut -d ':' -f 1)
    local mac_b2=$(echo $def_mac | cut -d ':' -f 2)
    local mac_b3=$(echo $def_mac | cut -d ':' -f 3)
    local mac_b4=$(echo $def_mac | cut -d ':' -f 4)
    local mac_b5=$(echo $def_mac | cut -d ':' -f 5)
    local mac_b6=$(echo $def_mac | cut -d ':' -f 6)

    grp_id=$(printf "%x" $grp_id)
    mac_b4=$(printf "%x" $((0x$mac_b4 + 0x$grp_id)))
    mac_b4=$(printf "%02x" $((0x$mac_b4 & 0xff)))
    mac_b6=$(printf "%x" $((0x$mac_b6 + 0x$grp_id)))
    mac_b6=$(printf "%02x" $((0x$mac_b6 & 0xff)))
    t_mac="$mac_b1:$mac_b2:$mac_b3:$mac_b4:$mac_b5:$mac_b6"

    eval "$2=$t_mac"
}

method="$1"

# buff="{\"method\":\"init\",\"params\":{\"whc_role\":\"CAP\",\"whc_ssid\":\"!@Mi-son\",\"whc_pswd\":\"123456789\"}}"
# buff="{\"method\":\"init\",\"params\":{\"whc_role\":\"RE\",\"whc_ssid\":\"!@Mi-son\",\"whc_pswd\":\"123456789\"}}"
# buff="{\"method\":\"init\",\"params\":{\"whc_role\":\"CAP\",\"bsd\":\"0\",\"ssid_2g\":\"!@Mi-son\",\"mgmt_2g\":\"mixed-psk\",\"pswd_2g\":\"123456789\",\"ssid_5g\":\"!@Mi-son_5G\",\"mgmt_5g\":\"mixed-psk\",\"pswd_5g\":\"123456789\"}}"
# buff="{\"method\":\"get_status\",\"params\":{}}"
# buff="{\"method\":\"get_topology\",\"params\":{}}"
# buff="{\"method\":\"delete\",\"params\":{}}"

#4. dispatch

case "$method" in
    init)
        [ $# -lt 2 ] && {
            usage
            return 1
        }
        [ -n "$3" ] && ssid="$3" || ssid="$def_ssid"
        if [ "$BH_METHOD" -eq "$USE_ONLY_5G_IND_VAP_BH" -o "$BH_METHOD" -eq "$USE_DUAL_BAND_IND_VAP_BH" ]; then
            [ -n "$4" ] && group_id="$4" || group_id="55"
        fi

    # dummy
    if true; then
        # dummy xiaoqiang init
        uci -q set xiaoqiang.common.INITTED="YES"
        uci commit xiaoqiang
        /etc/init.d/meshd stop
    fi


        [ "$2" = "relay" ] && {
            echo " @@@@@@@@@@@@@  init as a relay ssid=$ssid! "
            __init_relay "$ssid"
            return $?
        }

        [ "$2" = "router" ] && {
            echo " @@@@@@@@@@@@@  init as a router ssid=$ssid! "

            __init_router "$ssid"
            return $?
        }

        role="`echo $2 | sed 'y/capre/CAPRE/'`"
        [ -z "$role" ] && {
            usage
            return 1
        }

        if [ "$BH_METHOD" -eq "$USE_ONLY_5G_IND_VAP_BH" -o "$BH_METHOD" -eq "$USE_DUAL_BAND_IND_VAP_BH" ]; then
            __trans_group_id_to_mac $group_id whc_mac
            mac_b5=$(echo $whc_mac | cut -d ':' -f 5)
            mac_b6=$(echo $whc_mac | cut -d ':' -f 6)
            uid=$(printf "%04X" $((0x$mac_b5$mac_b6)))
            bh_ssid="${BHPREFIX}_${uid}"
            bh_mgmt="$bh_defmgmt"
            bh_passwd="$(xor_sum "$bh_ssid" "$whc_mac")"
            buff="{\"method\":\"init\",\"params\":{\"whc_role\":\"$role\",\"whc_ssid\":\"$ssid\",\"whc_pswd\":\"$def_pswd\",\"bh_ssid\":\"$bh_ssid\",\"bh_mgmt\":\"$bh_mgmt\",\"bh_pswd\":\"$bh_passwd\"}}"
        else
            buff="{\"method\":\"init\",\"params\":{\"whc_role\":\"$role\",\"whc_ssid\":\"$ssid\",\"whc_pswd\":\"$def_pswd\"}}"
        fi
        ;;

    delete)
        # dummy xiaoqiang init
        uci -q delete xiaoqiang.common.INITTED
        uci commit xiaoqiang

        # delete admin passwd
        nvram unset nv_sys_pwd; nvram commit

        buff="{\"method\":\"delete\",\"params\":{}}"
        ;;

    status)
        buff="{\"method\":\"get_status\",\"params\":{}}"
        ;;
        
    topo)
        buff="{\"method\":\"get_topology\",\"params\":{}}"
        ;;

    *)
        usage
        return 111
    ;;
esac


__stub_postinit()
{
    local buff='{"method":"postinit","params":{}}'
    sleep 1
    whc_ual "$buff"


    #################  stub for not init with app/web
        # init passwd
        (echo ""; sleep 1; echo "") | passwd

        ## default admin passwd will be 123456789
# curl http://localhost/cgi-bin/luci/api/xqsystem/set_name_password?nonce=0_00:e0:4c:2a:0a:a5_1534247552_180&newPwd=Tk30YyL3BWYSYZxPZieIqeXN3JTxQuxi/al7pFAz+0nki1wEeS2svsYXGDwpAqxF&oldPwd=3d1b99e9f128f4eb22d2882d3e58ac833469d005
        nvram set nv_sys_pwd=6cca6d898973eb08bd09a6efcabe72498aece060
        nvram commit
        uci set account.common.admin=6cca6d898973eb08bd09a6efcabe72498aece060
        uci commit account
        sync

        #[ "$role" = "RE" ] && {
        #    dhcp_apclient.sh start br-lan &
        #}

}


echo "$buff"
whc_ual "$buff" &

{
    # bsp test case, should manually call dhcp_apclient to set lan static ip in network.uci
    [ "$method" = "init" ] && {
        # simulate totalcheck quire from app
        while true; do
            whcal totalcheck && break
            logger -s -p 1 -t "whc_test" " __stub totalcheck=$? "
            sleep 3
        done

        whcal getmetric
        logger -s -p 1 -t "whc_test" " __stub getmetric=$?"

        __stub_postinit
    }
    [ "$method" = "delete" ] && {
        rm -rf /tmp/log/tt /tmp/log/xqwhc.log
    }
}

return 0


